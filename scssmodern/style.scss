@import "compass/css3";

/*===== CONFIG =====*/
$cols: 5;
$rows: 3;
// The largest angle (in degrees) the tiles will have. NOTE: the 'deg' suffix gets added where it's needed.
$maxAngle: 30;
// How deep (in px) to make the "curve" effect. NOTE: the 'px' suffix gets added where it's needed.
$depth: 60;
// How far back (in px) to push back the whole lot. NOTE: the 'px' suffix gets added where it's needed.
$depthOffset: 30;
/*===== END CONFIG =====*/

// Tile height
$tileH: 90% / $rows;
// Tile width
$tileW: 90% / $cols;
// Tile vertical padding ($rows + 1 because we want padding to the right as well)
$tileVP: 10% / ($rows + 1);
// Tile horizontal padding ($cols + 1 because we want padding to the right as well)
$tileHP: 10% / ($cols + 1);

// Thanks to Nic da Costa for the help with this. (https://plus.google.com/u/0/111523616060404197347/about)
$middleCol:floor($cols / 2);
$decreaseAngle:$maxAngle / floor($cols / 2);
$increaseDepth:$depth / floor($cols / 2);

/* The following lets us use a % height on the tiles. */
html, body {
    background: rgb(69,72,77);
    background: radial-gradient(ellipse at center, rgba(69,72,77,1) 0%,rgba(51,51,51,1) 100%);
    height:100%;
}

.container {
    height:100%;
    overflow:hidden;
    perspective:1000px;
    /*
        Stop the tiles from "moving behind" the
        clickable plane  (for lack of a better term)
        See here: http://bit.ly/Rd3DBj
    */
    transform:translateZ(0);
    width:100%;
    
    /* Make the tiles half opaque until hovered */
    &:hover .tile:not(:hover) {
        filter:grayscale(100%);
        opacity:0.5;
    }
}

.tile {
    backface-visibility:hidden;
    background:rgba(0,0,0,0.5);
    height:$tileH;
    position:absolute;
    transition:all .4s ease-in-out;
    transform-style:preserve-3d;
    width:$tileW;
    
    @for $i from 1 through $cols {
        // So if $cols is 3, this will give you :nth-of-type(3n+1), :nth-of-type(3n+2), and :nth-of-type(3n+3)
        &:nth-of-type(#{$cols}n+#{$i}) {
            left: $tileW * ($i - 1) + ($tileHP * $i);

            .container:hover & {
                font-size:$maxAngle;
                letter-spacing:$cols;

                // Thanks to Nic da Costa for the help with this calculation. (https://plus.google.com/u/0/111523616060404197347/about)
                @if $i <= $middleCol {
                    transform:rotateY(#{$maxAngle - ($decreaseAngle * ($i - 1))}deg) translateZ(#{-1 * ($depthOffset + $depth - ($depth - ($increaseDepth * ($i - 1))))}px);
                } @else {
                    transform:rotateY(#{$maxAngle - ($decreaseAngle * ($i - 1))}deg) translateZ(#{-1 * ($depthOffset + $depth - ($depth - ($increaseDepth * ($cols - $i) )))}px);
                }
            }
        }
    }

    @for $row from 1 through $rows {
        // So if $cols is 3, it would give you :nth-of-type(1n+1), :nth-of-type(1n+4), and :nth-of-type(1n+7)
        &:nth-of-type(1n+#{($cols * ($row - 1)) + 1}) {
            top: $tileH * ($row - 1) + ($tileVP * $row);
        }
    }

    .container:hover &:active, .container:hover &.active {
        height:100% - ($tileVP * 2);
        left:$tileHP;
        top:$tileVP;
        transform:rotateY(0) translateZ(0);
        width:100% - ($tileHP * 2);
        z-index:3;
    }
}